{"version":3,"sources":["../src/await.js"],"names":["readAsync","data","JSON","parse","console","log","name","init","fs","require","util","promisify","readFile"],"mappings":";;;qEA6DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBA,UAAU,gBAAV,CADnB;;AAAA;AACMC,gBADN;;;AAGEA,mBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,oBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,I;;;;;;;AA5Df;AACA;;;;;;;;;;;;;;;;;;AAmBA;AACA;;;;;;;;;;;;;;;;;;;;;AAqBA;;AAEA;;;;;;;;;;;AAWA;AACA,IAAMC,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAMT,YAAYU,KAAKC,SAAL,CAAeH,GAAGI,QAAlB,CAAlB;;AASAL","file":"await.js","sourcesContent":["\n// 第一个阶段 Callback\n/* const fs = require('fs')\n\nfunction readFile (cb) {\n  fs.readFile('./package.json', (err, data) => {\n    if (err) return cb(err)\n\n    cb(null, data)\n  })\n}\n\nreadFile((err, data) => {\n  if (!err) {\n    data = JSON.parse(data)\n\n    console.log(data.name)\n  }\n}) */\n\n\n// 第二阶段 Promise\n/* const fs = require('fs')\n\nfunction readFileAsync (path) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) =>{\n      if (err) reject(err)\n      else resolve(data)\n    })\n  })\n}\n\nreadFileAsync('./package.json')\n  .then(data => {\n    data = JSON.parse(data)\n\n    console.log(data.name)\n  })\n  .catch(err => {\n    console.log(err)\n  }) */\n\n// 第三个阶段 co + Generator Function + Promise\n\n/* const fs = require('fs')\nconst co = require('co')\nconst util = require('util')\n\nco(function *() {\n  let data = yield util.promisify(fs.readFile)('./package.json')\n\n  data = JSON.parse(data)\n  console.log(data.name)\n}) */\n\n// 第四个阶段 Async\nconst fs = require('fs')\nconst util = require('util')\nconst readAsync = util.promisify(fs.readFile)\n\nasync function init () {\n  let data = await readAsync('./package.json')\n\n  data = JSON.parse(data)\n  console.log(data.name)\n}\n\ninit()\n\n\n\n"]}